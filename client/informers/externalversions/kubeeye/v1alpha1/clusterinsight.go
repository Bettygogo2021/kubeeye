/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	time "time"

	"github.com/kubesphere/kubeeye/apis/kubeeye/v1alpha1"
	versioned2 "github.com/kubesphere/kubeeye/client/clientset/versioned"
	internalinterfaces2 "github.com/kubesphere/kubeeye/client/informers/externalversions/internalinterfaces"
	v1alpha13 "github.com/kubesphere/kubeeye/client/listers/kubeeye/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// ClusterInsightInformer provides access to a shared informer and lister for
// ClusterInsights.
type ClusterInsightInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha13.ClusterInsightLister
}

type clusterInsightInformer struct {
	factory          internalinterfaces2.SharedInformerFactory
	tweakListOptions internalinterfaces2.TweakListOptionsFunc
}

// NewClusterInsightInformer constructs a new informer for ClusterInsight type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterInsightInformer(client versioned2.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredClusterInsightInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterInsightInformer constructs a new informer for ClusterInsight type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterInsightInformer(client versioned2.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces2.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeeyeV1alpha1().ClusterInsights().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeeyeV1alpha1().ClusterInsights().Watch(context.TODO(), options)
			},
		},
		&v1alpha1.ClusterInsight{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterInsightInformer) defaultInformer(client versioned2.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredClusterInsightInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *clusterInsightInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&v1alpha1.ClusterInsight{}, f.defaultInformer)
}

func (f *clusterInsightInformer) Lister() v1alpha13.ClusterInsightLister {
	return v1alpha13.NewClusterInsightLister(f.Informer().GetIndexer())
}
